-- https://github.com/OopssSorry/LuaU-Free-Key-System-UI/

local KeySystem = loadstring(game:HttpGet("https://raw.githubusercontent.com/OopssSorry/LuaU-Free-Key-System-UI/main/source.lua"))()
local KeyValid = false
local response = KeySystem:Init({
	Debug=false, -- <bool> Prints some output in console when true
	Title="Universal Aimbot | Key System", -- <string or nil> Title of key system
	Description="by Meowinc Scripts", -- <string or nil> Description of key system
	Link="https://discord.gg/gAhQqTUktK", -- <string> String to get key
	Discord=nil, -- <string or nil> Button to join your discord server
	SaveKey=false, -- <bool or nil> Just auto save key
	Verify=function(key) -- <function> Verify is key valid
		if key=="meowincaimbot" then
      KeyValid=true
			return true
		else
			return false
		end
	end,
	GuiParent = game.CoreGui, -- <object or nil> :3
})

if not response or not KeyValid then return end

local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local HttpService = game:GetService("HttpService")
local RunService = game:GetService("RunService")
local TeleportService = game:GetService("TeleportService")
local players = game:GetService("Players")
local wrk = game:GetService("Workspace")
local plr = players.LocalPlayer
local hrp = plr.Character:FindFirstChild("HumanoidRootPart")
local humanoid = plr.Character:FindFirstChild("Humanoid")

local function onCharacterAdded(character)
    hrp = character:WaitForChild("HumanoidRootPart")
    humanoid = character:WaitForChild("Humanoid")
end

plr.CharacterAdded:Connect(onCharacterAdded)

if plr.Character then
    onCharacterAdded(plr.Character)
end

local camera = wrk.CurrentCamera
local mouse = plr:GetMouse()

local httprequest = (syn and syn.request) or (http and http.request) or http_request or (fluxus and fluxus.request) or request

local hue = 0
local rainbowFov = false
local rainbowSpeed = 0.005

local aimFov = 100
local aimParts = {"Head"}
local aiming = false
local predictionStrength = 0.065
local smoothing = 0.05

local aimbotEnabled = false
local wallCheck = true
local stickyAimEnabled = false
local teamCheck = false
local healthCheck = false
local minHealth = 0

local antiAim = false

local antiAimAmountX = 0
local antiAimAmountY = -100
local antiAimAmountZ = 0

local antiAimMethod = "Reset Velo"

local randomVeloRange = 100

local spinBot = false
local spinBotSpeed = 20

local circleColor = Color3.fromRGB(255, 0, 0)
local targetedCircleColor = Color3.fromRGB(0, 255, 0)

local aimViewerEnabled = false
local ignoreSelf = true

local Window = Rayfield:CreateWindow({
    Name = "Universal Aimbot",
    LoadingTitle = "Loading...",
    LoadingSubtitle = "by Meowinc Scripts",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "UniversalAimbot",
        FileName = "byMeowincScripts"
    },
})

local Aimbot = Window:CreateTab("Aimbot")
local AntiAim = Window:CreateTab("Anti-Aim")
local Misc = Window:CreateTab("Misc")

local fovCircle = Drawing.new("Circle")
fovCircle.Thickness = 2
fovCircle.Radius = aimFov
fovCircle.Filled = false
fovCircle.Color = circleColor
fovCircle.Visible = false

local currentTarget = nil

local function checkTeam(player)
    if teamCheck and player.Team == plr.Team then
        return true
    end
    return false
end

local function checkWall(targetCharacter)
    local targetHead = targetCharacter:FindFirstChild("Head")
    if not targetHead then return true end

    local origin = camera.CFrame.Position
    local direction = (targetHead.Position - origin).unit * (targetHead.Position - origin).magnitude
    local raycastParams = RaycastParams.new()
    raycastParams.FilterDescendantsInstances = {plr.Character, targetCharacter}
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist

    local raycastResult = wrk:Raycast(origin, direction, raycastParams)
    return raycastResult and raycastResult.Instance ~= nil
end

local function getClosestPart(character)
    local closestPart = nil
    local shortestCursorDistance = aimFov
    local cameraPos = camera.CFrame.Position

    for _, partName in ipairs(aimParts) do
        local part = character:FindFirstChild(partName)
        if part then
            local partPos = camera:WorldToViewportPoint(part.Position)
            local screenPos = Vector2.new(partPos.X, partPos.Y)
            local cursorDistance = (screenPos - Vector2.new(mouse.X, mouse.Y)).Magnitude

            if cursorDistance < shortestCursorDistance and partPos.Z > 0 then
                shortestCursorDistance = cursorDistance
                closestPart = part
            end
        end
    end

    return closestPart
end

local function getTarget()
    local nearestPlayer = nil
    local closestPart = nil
    local shortestCursorDistance = aimFov

    for _, player in ipairs(players:GetPlayers()) do
        if player ~= plr and player.Character and not checkTeam(player) then
            if player.Character.Humanoid.Health >= minHealth or not healthCheck then
                local targetPart = getClosestPart(player.Character)
                if targetPart then
                    local screenPos = camera:WorldToViewportPoint(targetPart.Position)
                    local cursorDistance = (Vector2.new(screenPos.X, screenPos.Y) - Vector2.new(mouse.X, mouse.Y)).Magnitude

                    if cursorDistance < shortestCursorDistance then
                        if not wallCheck or not checkWall(player.Character) then
                            shortestCursorDistance = cursorDistance
                            nearestPlayer = player
                            closestPart = targetPart
                        end
                    end
                end
            end
        end
    end

    return nearestPlayer, closestPart
end

local function predict(player, part)
    if player and part then
        local velocity = player.Character.HumanoidRootPart.Velocity
        local predictedPosition = part.Position + (velocity * predictionStrength)
        return predictedPosition
    end
    return nil
end

local function smooth(from, to)
    return from:Lerp(to, smoothing)
end

local function aimAt(player, part)
    local predictedPosition = predict(player, part)
    if predictedPosition then
        if player.Character.Humanoid.Health >= minHealth or not healthCheck then
            local targetCFrame = CFrame.new(camera.CFrame.Position, predictedPosition)
            camera.CFrame = smooth(camera.CFrame, targetCFrame)
        end
    end
end

RunService.RenderStepped:Connect(function()
    if aimbotEnabled then
        local offset = 50
        fovCircle.Position = Vector2.new(mouse.X, mouse.Y + offset)

        if rainbowFov then
            hue = hue + rainbowSpeed
            if hue > 1 then hue = 0 end
            fovCircle.Color = Color3.fromHSV(hue, 1, 1)
        else
            if aiming and currentTarget then
                fovCircle.Color = targetedCircleColor
            else
                fovCircle.Color = circleColor
            end
        end

        if aiming then
            if stickyAimEnabled and currentTarget then
                local headPos = camera:WorldToViewportPoint(currentTarget.Character.Head.Position)
                local screenPos = Vector2.new(headPos.X, headPos.Y)
                local cursorDistance = (screenPos - Vector2.new(mouse.X, mouse.Y)).Magnitude

                if cursorDistance > aimFov or (wallCheck and checkWall(currentTarget.Character)) or checkTeam(currentTarget) then
                    currentTarget = nil
                end
            end

            if not stickyAimEnabled or not currentTarget then
                local target, targetPart = getTarget()
                currentTarget = target
                currentTargetPart = targetPart
            end

            if currentTarget and currentTargetPart then
                aimAt(currentTarget, currentTargetPart)
            end
        else
            currentTarget = nil
        end
    end
end)

RunService.Heartbeat:Connect(function()
    if antiAim then
        if antiAimMethod == "Reset Velo" then
            local vel = hrp.Velocity
            hrp.Velocity = Vector3.new(antiAimAmountX, antiAimAmountY, antiAimAmountZ)
            RunService.RenderStepped:Wait()
            hrp.Velocity = vel
        elseif antiAimMethod == "Reset Pos [BROKEN]" then
            local pos = hrp.CFrame
            hrp.Velocity = Vector3.new(antiAimAmountX, antiAimAmountY, antiAimAmountZ)
            RunService.RenderStepped:Wait()
            hrp.CFrame = pos
        elseif antiAimMethod == "Random Velo" then
            local vel = hrp.Velocity
            local a = math.random(-randomVeloRange,randomVeloRange)
            local s = math.random(-randomVeloRange,randomVeloRange)
            local d = math.random(-randomVeloRange,randomVeloRange)
            hrp.Velocity = Vector3.new(a,s,d)
            RunService.RenderStepped:Wait()
            hrp.Velocity = vel
        end
    end
end)

mouse.Button2Down:Connect(function()
    if aimbotEnabled then
        aiming = true
    end
end)

mouse.Button2Up:Connect(function()
    if aimbotEnabled then
        aiming = false
    end
end)

local aimbot = Aimbot:CreateToggle({
    Name = "Aimbot",
    CurrentValue = false,
    Flag = "Aimbot",
    Callback = function(Value)
        aimbotEnabled = Value
        fovCircle.Visible = Value
    end
})

local aimpart = Aimbot:CreateDropdown({
    Name = "Aim Part",
    Options = {"Head","HumanoidRootPart","Left Arm","Right Arm","Torso","Left Leg","Right Leg"},
    CurrentOption = {"Head"},
    MultipleOptions = true,
    Flag = "AimPart",
    Callback = function(Options)
        aimParts = Options
    end,
 })

local smoothingslider = Aimbot:CreateSlider({
    Name = "Smoothing",
    Range = {0, 100},
    Increment = 1,
    CurrentValue = 5,
    Flag = "Smoothing",
    Callback = function(Value)
        smoothing = 1 - (Value / 100)
    end,
})

local predictionstrength = Aimbot:CreateSlider({
    Name = "Prediction Strength",
    Range = {0, 0.2},
    Increment = 0.001,
    CurrentValue = 0.065,
    Flag = "PredictionStrength",
    Callback = function(Value)
        predictionStrength = Value
    end,
})

local fovvisibility = Aimbot:CreateToggle({
    Name = "Fov Visibility",
    CurrentValue = true,
    Flag = "FovVisibility",
    Callback = function(Value)
        fovCircle.Visible = Value
    end
})

local aimbotfov = Aimbot:CreateSlider({
    Name = "Aimbot Fov",
    Range = {0, 1000},
    Increment = 1,
    CurrentValue = 100,
    Flag = "AimbotFov",
    Callback = function(Value)
        aimFov = Value
        fovCircle.Radius = aimFov
    end,
})

local wallcheck = Aimbot:CreateToggle({
    Name = "Wall Check",
    CurrentValue = true,
    Flag = "WallCheck",
    Callback = function(Value)
        wallCheck = Value
    end
})

local stickyaim = Aimbot:CreateToggle({
    Name = "Sticky Aim",
    CurrentValue = false,
    Flag = "StickyAim",
    Callback = function(Value)
        stickyAimEnabled = Value
    end
})

local teamchecktoggle = Aimbot:CreateToggle({
    Name = "Team Check",
    CurrentValue = false,
    Flag = "TeamCheck",
    Callback = function(Value)
        teamCheck = Value
    end
})

local healthchecktoggle = Aimbot:CreateToggle({
    Name = "Health Check",
    CurrentValue = false,
    Flag = "HealthCheck",
    Callback = function(Value)
        healthCheck = Value
    end
})

local minhealth = Aimbot:CreateSlider({
    Name = "Min Health",
    Range = {0, 100},
    Increment = 1,
    CurrentValue = 0,
    Flag = "MinHealth",
    Callback = function(Value)
        minHealth = Value
    end,
})

local circlecolor = Aimbot:CreateColorPicker({
    Name = "Fov Color",
    Color = circleColor,
    Callback = function(Color)
        circleColor = Color
        fovCircle.Color = Color
    end
})

local targetedcirclecolor = Aimbot:CreateColorPicker({
    Name = "Targeted Fov Color",
    Color = targetedCircleColor,
    Callback = function(Color)
        targetedCircleColor = Color
    end
})

local circlerainbow = Aimbot:CreateToggle({
    Name = "Rainbow Fov",
    CurrentValue = false,
    Flag = "RainbowFov",
    Callback = function(Value)
        rainbowFov = Value
    end
})

-- Create mobile button (invisible by default)
local mobileButton = Instance.new("TextButton")
mobileButton.Size = UDim2.new(0, 100, 0, 50)
mobileButton.Position = UDim2.new(0.85, 0, 0.85, 0) -- bottom-right corner
mobileButton.Text = "Aim"
mobileButton.BackgroundColor3 = Color3.fromRGB(255, 50, 50)
mobileButton.TextColor3 = Color3.fromRGB(255, 255, 255)
mobileButton.Visible = false
mobileButton.TextScaled = true
mobileButton.BackgroundTransparency = 0.2
mobileButton.Parent = game:GetService("CoreGui")

-- Rounded corners
local corner = Instance.new("UICorner")
corner.CornerRadius = UDim.new(0, 10)
corner.Parent = mobileButton

-- Drag support
local dragging, dragInput, dragStart, startPos = false, nil, nil, nil
local function updatePosition(input)
    local delta = input.Position - dragStart
    mobileButton.Position = UDim2.new(
        startPos.X.Scale,
        startPos.X.Offset + delta.X,
        startPos.Y.Scale,
        startPos.Y.Offset + delta.Y
    )
end

mobileButton.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = mobileButton.Position
    elseif input.UserInputType == Enum.UserInputType.MouseButton1 then
        if aimbotEnabled then
            aiming = not aiming -- toggle aiming
            if aiming then
                mobileButton.BackgroundColor3 = Color3.fromRGB(50, 200, 50)
            else
                mobileButton.BackgroundColor3 = Color3.fromRGB(255, 50, 50)
            end
        end
    end
end)

mobileButton.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.Touch then
        dragInput = input
    end
end)

game:GetService("UserInputService").InputChanged:Connect(function(input)
    if dragging and input == dragInput then
        updatePosition(input)
    end
end)

mobileButton.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.Touch then
        dragging = false
    end
end)

-- Show/hide mobile button when Aimbot is toggled
aimbot:SetCallback(function(Value)
    aimbotEnabled = Value
    fovCircle.Visible = Value
    mobileButton.Visible = Value
end)


local antiaimtoggle = AntiAim:CreateToggle({
    Name = "Anti-Aim",
    CurrentValue = false,
    Flag = "AntiAim",
    Callback = function(Value)
        antiAim = Value
        if Value then
            Rayfield:Notify({Title = "Anti-Aim", Content = "Enabled!", Duration = 1, Image = 4483362458,})
        else
            Rayfield:Notify({Title = "Anti-Aim", Content = "Disabled!", Duration = 1, Image = 4483362458,})
        end
    end
})

local antiaimmethod = AntiAim:CreateDropdown({
    Name = "Anti-Aim Method",
    Options = {"Reset Velo","Random Velo","Reset Pos [BROKEN]"},
    CurrentOption = "Reset Velo",
    Flag = "AntiAimMethod",
    Callback = function(Option)
        antiAimMethod = type(Option) == "table" and Option[1] or Option
        if antiAimMethod == "Reset Velo" then
            Rayfield:Notify({Title = "Reset Velocity", Content = "Nobody will see it, but exploiters will aim in the wrong place.", Duration = 5, Image = 4483362458,})
        elseif antiAimMethod == "Reset Pos [BROKEN]" then
            Rayfield:Notify({Title = "Reset Pos [BROKEN]", Content = "This is a bit buggy right now, so idk if it works that well", Duration = 5, Image = 4483362458,})
        elseif antiAimMethod == "Random Velo" then
            Rayfield:Notify({Title = "Random Velocity", Content = "Depending on ping some peoplev will see u 'teleporting' around but you are actually in the same spot the entire time.", Duration = 5, Image = 4483362458,})
        end
    end,
})

local antiaimamountx = AntiAim:CreateSlider({
    Name = "Anti-Aim Amount X",
    Range = {-1000, 1000},
    Increment = 10,
    CurrentValue = 0,
    Flag = "AntiAimAmountX",
    Callback = function(Value)
        antiAimAmountX = Value
    end,
})

local antiaimamounty = AntiAim:CreateSlider({
    Name = "Anti-Aim Amount Y",
    Range = {-1000, 1000},
    Increment = 10,
    CurrentValue = -100,
    Flag = "AntiAimAmountY",
    Callback = function(Value)
        antiAimAmountY = Value
    end,
})

local antiaimamountz = AntiAim:CreateSlider({
    Name = "Anti-Aim Amount Z",
    Range = {-1000, 1000},
    Increment = 10,
    CurrentValue = 0,
    Flag = "AntiAimAmountZ",
    Callback = function(Value)
        antiAimAmountZ = Value
    end,
})

local randomvelorange = AntiAim:CreateSlider({
    Name = "Random Velo Range",
    Range = {0, 1000},
    Increment = 10,
    CurrentValue = 100,
    Flag = "RandomVeloRange",
    Callback = function(Value)
        randomVeloRange = Value
    end,
})

-- [< Misc >]

local spinbottoggle = Misc:CreateToggle({
    Name = "Spin-Bot",
    CurrentValue = false,
    Flag = "SpinBot",
    Callback = function(Value)
        spinBot = Value
        if Value then
            for i,v in pairs(hrp:GetChildren()) do
                if v.Name == "Spinning" then
                    v:Destroy()
                end
            end
            plr.Character.Humanoid.AutoRotate = false
            local Spin = Instance.new("BodyAngularVelocity")
            Spin.Name = "Spinning"
            Spin.Parent = hrp
            Spin.MaxTorque = Vector3.new(0, math.huge, 0)
            Spin.AngularVelocity = Vector3.new(0,spinBotSpeed,0)
            Rayfield:Notify({Title = "Spin Bot", Content = "Enabled!", Duration = 1, Image = 4483362458,})
        else
            for i,v in pairs(hrp:GetChildren()) do
                if v.Name == "Spinning" then
                    v:Destroy()
                end
            end
            plr.Character.Humanoid.AutoRotate = true
            Rayfield:Notify({Title = "Spin Bot", Content = "Disabled!", Duration = 1, Image = 4483362458,})
        end
    end
})

local spinbotspeed = Misc:CreateSlider({
    Name = "Spin-Bot Speed",
    Range = {0, 1000},
    Increment = 1,
    CurrentValue = 20,
    Flag = "SpinBotSpeed",
    Callback = function(Value)
        spinBotSpeed = Value
        if spinBot then
            for i,v in pairs(hrp:GetChildren()) do
                if v.Name == "Spinning" then
                    v:Destroy()
                end
            end
            local Spin = Instance.new("BodyAngularVelocity")
            Spin.Name = "Spinning"
            Spin.Parent = hrp
            Spin.MaxTorque = Vector3.new(0, math.huge, 0)
            Spin.AngularVelocity = Vector3.new(0,Value,0)
        end
    end,
})

-- ===============================
-- Existing code up to Misc tab
-- ===============================

-- [Your existing Misc toggles/buttons here]
local ServerHop = Misc:CreateButton({
	Name = "Server Hop",
	Callback = function()
		if httprequest then
            local servers = {}
            local req = httprequest({Url = string.format("https://games.roblox.com/v1/games/%d/servers/Public?sortOrder=Desc&limit=100&excludeFullGames=true", game.PlaceId)})
            local body = HttpService:JSONDecode(req.Body)
        
            if body and body.data then
                for i, v in next, body.data do
                    if type(v) == "table" and tonumber(v.playing) and tonumber(v.maxPlayers) and v.playing < v.maxPlayers and v.id ~= game.JobId then
                        table.insert(servers, 1, v.id)
                    end
                end
            end
        
            if #servers > 0 then
                TeleportService:TeleportToPlaceInstance(game.PlaceId, servers[math.random(1, #servers)], plr)
            else
                Rayfield:Notify({Title = "Server Hop", Content = "Couldn't find a valid server", Duration = 1, Image = 4483362458,})
            end
        else
            Rayfield:Notify({Title = "Server Hop", Content = "Your executor is ass, get a better one", Duration = 1, Image = 4483362458,})
        end
	end,
})

-- ===============================
-- ADD ESP TAB
-- ===============================
local ESP = Window:CreateTab("ESP")

-- ESP Config
local espEnabled = false
local espBoxes = true
local espOutline = true
local espHead = true
local espBody = true
local espFeet = false
local espTracers = false
local tracerOrigin = "Bottom" -- "Bottom","Top","Center"
local espNames = true
local espHealth = true
local espDistance = true
local espTeamCheck = false
local espRainbowBoxes = false
local espRainbowText = false
local espBoxColor = Color3.fromRGB(255,0,0)
local espTextColor = Color3.fromRGB(255,255,255)
local espThickness = 2

local espObjects = {}

local function removeESP()
    for _, obj in pairs(espObjects) do
        if obj and obj.Visible then
            obj:Remove()
        end
    end
    espObjects = {}
end

local function createESP(player)
    if player == plr then return end
    if espTeamCheck and player.Team == plr.Team then return end
    if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then return end

    local root = player.Character:FindFirstChild("HumanoidRootPart")
    local hum = player.Character:FindFirstChild("Humanoid")

    local boxes = {}
    if espBoxes then
        if espHead then
            local headBox = Drawing.new("Square")
            headBox.Thickness = espThickness
            headBox.Filled = false
            headBox.Color = espBoxColor
            headBox.Visible = false
            table.insert(boxes, headBox)
        end
        if espBody then
            local bodyBox = Drawing.new("Square")
            bodyBox.Thickness = espThickness
            bodyBox.Filled = false
            bodyBox.Color = espBoxColor
            bodyBox.Visible = false
            table.insert(boxes, bodyBox)
        end
        if espFeet then
            local feetBox = Drawing.new("Square")
            feetBox.Thickness = espThickness
            feetBox.Filled = false
            feetBox.Color = espBoxColor
            feetBox.Visible = false
            table.insert(boxes, feetBox)
        end
    end

    local tracer = Drawing.new("Line")
    tracer.Thickness = 1
    tracer.Color = espBoxColor
    tracer.Visible = false

    local nameESP = Drawing.new("Text")
    nameESP.Text = player.Name
    nameESP.Size = 16
    nameESP.Center = true
    nameESP.Color = espTextColor
    nameESP.Visible = false

    local healthESP = Drawing.new("Text")
    healthESP.Text = ""
    healthESP.Size = 14
    healthESP.Center = true
    healthESP.Color = espTextColor
    healthESP.Visible = false

    local distanceESP = Drawing.new("Text")
    distanceESP.Text = ""
    distanceESP.Size = 14
    distanceESP.Center = true
    distanceESP.Color = espTextColor
    distanceESP.Visible = false

    table.insert(espObjects, tracer)
    table.insert(espObjects, nameESP)
    table.insert(espObjects, healthESP)
    table.insert(espObjects, distanceESP)
    for _, b in pairs(boxes) do
        table.insert(espObjects, b)
    end

    RunService.RenderStepped:Connect(function()
        if not espEnabled then
            for _, obj in pairs(espObjects) do obj.Visible = false end
            return
        end
        if not root.Parent then
            for _, obj in pairs(espObjects) do obj.Visible = false end
            return
        end

        local rootPos, onScreen = camera:WorldToViewportPoint(root.Position)
        if not onScreen then
            for _, obj in pairs(espObjects) do obj.Visible = false end
            return
        end
        local distance = (root.Position - plr.Character.HumanoidRootPart.Position).Magnitude

        if espRainbowBoxes then
            espBoxColor = Color3.fromHSV(tick()%5/5,1,1)
            for _, b in pairs(boxes) do b.Color = espBoxColor end
            tracer.Color = espBoxColor
        end
        if espRainbowText then
            espTextColor = Color3.fromHSV(tick()%5/5,1,1)
            nameESP.Color = espTextColor
            healthESP.Color = espTextColor
            distanceESP.Color = espTextColor
        end

        if espHead and player.Character:FindFirstChild("Head") then
            local head = player.Character.Head
            local b = boxes[1]
            local size = 50 / rootPos.Z
            b.Size = Vector2.new(size,size*2)
            local headPos = camera:WorldToViewportPoint(head.Position)
            b.Position = Vector2.new(headPos.X - b.Size.X/2, headPos.Y - b.Size.Y/2)
            b.Visible = true
        end
        if espBody then
            local torso = player.Character:FindFirstChild("HumanoidRootPart")
            if torso then
                local b = boxes[espHead and 2 or 1]
                local size = 50 / rootPos.Z
                b.Size = Vector2.new(size,size*2)
                local torsoPos = camera:WorldToViewportPoint(torso.Position)
                b.Position = Vector2.new(torsoPos.X - b.Size.X/2, torsoPos.Y - b.Size.Y/2)
                b.Visible = true
            end
        end
        if espFeet then
            local rootPart = player.Character:FindFirstChild("HumanoidRootPart")
            if rootPart then
                local b = boxes[#boxes]
                local size = 50 / rootPos.Z
                b.Size = Vector2.new(size,size/2)
                local footPos = camera:WorldToViewportPoint(rootPart.Position - Vector3.new(0,3,0))
                b.Position = Vector2.new(footPos.X - b.Size.X/2, footPos.Y - b.Size.Y/2)
                b.Visible = true
            end
        end

        if espTracers then
            local originPos
            if tracerOrigin == "Bottom" then
                originPos = Vector2.new(camera.ViewportSize.X/2, camera.ViewportSize.Y)
            elseif tracerOrigin == "Top" then
                originPos = Vector2.new(camera.ViewportSize.X/2,0)
            else
                originPos = Vector2.new(camera.ViewportSize.X/2,camera.ViewportSize.Y/2)
            end
            tracer.From = originPos
            tracer.To = Vector2.new(rootPos.X, rootPos.Y)
            tracer.Visible = true
        else
            tracer.Visible = false
        end

        if espNames then
            nameESP.Position = Vector2.new(rootPos.X, rootPos.Y - 40)
            nameESP.Visible = true
        else
            nameESP.Visible = false
        end
        if espHealth and hum then
            healthESP.Text = math.floor(hum.Health).."/"..math.floor(hum.MaxHealth)
            healthESP.Position = Vector2.new(rootPos.X, rootPos.Y - 25)
            healthESP.Visible = true
        else
            healthESP.Visible = false
        end
        if espDistance then
            distanceESP.Text = math.floor(distance).."m"
            distanceESP.Position = Vector2.new(rootPos.X, rootPos.Y - 10)
            distanceESP.Visible = true
        else
            distanceESP.Visible = false
        end
    end)
end

-- Player connections
players.PlayerAdded:Connect(createESP)
for _, pl in pairs(players:GetPlayers()) do createESP(pl) end

-- ESP Toggles
ESP:CreateToggle({Name="ESP Enabled", CurrentValue=false, Flag="ESPEnabled", Callback=function(v) espEnabled=v if not v then removeESP() end end})
ESP:CreateToggle({Name="Box ESP", CurrentValue=true, Flag="ESPBoxes", Callback=function(v) espBoxes=v end})
ESP:CreateToggle({Name="Outlined Boxes", CurrentValue=true, Flag="ESPOutline", Callback=function(v) espOutline=v end})
ESP:CreateToggle({Name="Head Box", CurrentValue=true, Flag="ESPHead", Callback=function(v) espHead=v end})
ESP:CreateToggle({Name="Body Box", CurrentValue=true, Flag="ESPBody", Callback=function(v) espBody=v end})
ESP:CreateToggle({Name="Feet Box", CurrentValue=false, Flag="ESPFeet", Callback=function(v) espFeet=v end})
ESP:CreateToggle({Name="Tracers", CurrentValue=false, Flag="ESPTracers", Callback=function(v) espTracers=v end})
ESP:CreateDropdown({Name="Tracer Origin", Options={"Bottom","Top","Center"}, CurrentOption="Bottom", Flag="TracerOrigin", Callback=function(v) tracerOrigin=v[1] end})
ESP:CreateToggle({Name="Name ESP", CurrentValue=true, Flag="ESPNames", Callback=function(v) espNames=v end})
ESP:CreateToggle({Name="Health ESP", CurrentValue=true, Flag="ESPHealth", Callback=function(v) espHealth=v end})
ESP:CreateToggle({Name="Distance ESP", CurrentValue=true, Flag="ESPDist", Callback=function(v) espDistance=v end})
ESP:CreateToggle({Name="Team Check", CurrentValue=false, Flag="ESPTeamCheck", Callback=function(v) espTeamCheck=v end})
ESP:CreateToggle({Name="Rainbow Boxes", CurrentValue=false, Flag="ESPRainbowBoxes", Callback=function(v) espRainbowBoxes=v end})
ESP:CreateToggle({Name="Rainbow Text", CurrentValue=false, Flag="ESPRainbowText", Callback=function(v) espRainbowText=v end})

-- ===============================
-- Rest of your script continues here...
-- ===============================

